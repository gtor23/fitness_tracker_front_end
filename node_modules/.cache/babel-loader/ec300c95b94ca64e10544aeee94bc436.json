{"ast":null,"code":"var _jsxFileName = \"/Users/jtorres/UIC Bootcamp/Projects/fitness_tracker/fitness_tracker_frontend/src/components/myroutines.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Redirect, Link } from 'react-router-dom';\nimport { userRoutines, updateRoutine, deleteRoutine, addActivityToRoutine } from '../api';\nimport EditRoutine from './editroutine';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MyRoutines = props => {\n  _s();\n\n  const [theUserRoutines, setTheUserRoutines] = useState([]);\n  const [activityId, setActivityId] = useState();\n  const [durationCount, setDurationCount] = useState();\n  const [routineId, setRoutineId] = useState(); // const [showEdit, setShowEdit] = useState(false);\n  // const [hack, setHack] = useState(1)\n\n  const {\n    loggedIn,\n    currentUser,\n    activities\n  } = props; // console.log('trap',theUserRoutines)\n\n  console.log('dddd', activityId); // const makeEdit = async () => {\n  //     setShowEdit(true)\n  // }\n\n  const handleUpdate = async (name, goal, id) => {\n    try {\n      const routines = await updateRoutine(name, goal, id);\n    } catch (error) {\n      console.error;\n    }\n  };\n\n  const handleDeleteRoutine = async id => {\n    try {\n      const routines = await deleteRoutine(id);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleActivityAdd = async event => {\n    event.preventDefault();\n    const {\n      duration,\n      count\n    } = durationCount;\n\n    try {\n      const response = await addActivityToRoutine(routineId, activityId, count, duration);\n\n      if (!response.id) {\n        return alert('Error');\n      }\n\n      setRoutineId(null);\n      setDurationCount(null);\n      setActivityId(null);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const getUserRoutines = async () => {\n    if (!currentUser || !activities) {\n      return;\n    }\n\n    try {\n      const routines = await userRoutines(currentUser); // console.log('hhhh', routines)\n\n      setTheUserRoutines(routines); // console.log('pop',theUserRoutines)\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(getUserRoutines, [currentUser, activities]);\n\n  if (!loggedIn) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"------My routines------\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), theUserRoutines ? theUserRoutines.map((routine, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: routine.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: routine.goal\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"edit\",\n            onClick: () => handleUpdate(routine.name, routine.goal, routine.id),\n            children: \"Edit Routine Name or Goal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"delete\" // onClick = {() => handleDeleteRoutine(routine.id)}\n            ,\n            children: \"Delete Routine\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleActivityAdd,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Add Routine Activity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              name: \"Activities\",\n              id: \"selectactivity\",\n              value: activityId,\n              onChange: event => {\n                setRoutineId(routine.id);\n                setActivityId(event.target.value);\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"null\",\n                children: \"Select Activity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 25\n              }, this), activities.map((activity, index) => {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: activity.id,\n                  children: activity.name\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 37\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Count\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"1\",\n              placeholder: \"Count\",\n              onChange: event => setDurationCount({ ...durationCount,\n                count: event.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Duration\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"1\",\n              placeholder: \"Duration\",\n              onChange: event => setDurationCount({ ...durationCount,\n                duration: event.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"addroutine\",\n              type: \"submit\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No routines made by you\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true);\n  }\n};\n\n_s(MyRoutines, \"T3w0x2XHJxqhTvcI8+8omU2xZS0=\");\n\n_c = MyRoutines;\nexport default MyRoutines;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyRoutines\");","map":{"version":3,"sources":["/Users/jtorres/UIC Bootcamp/Projects/fitness_tracker/fitness_tracker_frontend/src/components/myroutines.js"],"names":["React","useState","useEffect","Redirect","Link","userRoutines","updateRoutine","deleteRoutine","addActivityToRoutine","EditRoutine","MyRoutines","props","theUserRoutines","setTheUserRoutines","activityId","setActivityId","durationCount","setDurationCount","routineId","setRoutineId","loggedIn","currentUser","activities","console","log","handleUpdate","name","goal","id","routines","error","handleDeleteRoutine","handleActivityAdd","event","preventDefault","duration","count","response","alert","getUserRoutines","map","routine","index","target","value","activity"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport {Redirect, Link} from 'react-router-dom'\nimport {userRoutines, updateRoutine, deleteRoutine, addActivityToRoutine} from '../api'\nimport EditRoutine from './editroutine'\nconst MyRoutines = (props) => {\n\n    const [theUserRoutines, setTheUserRoutines] = useState([]);\n    const [activityId, setActivityId] = useState();\n    const [durationCount, setDurationCount] = useState();\n    const [routineId, setRoutineId] = useState();\n\n    // const [showEdit, setShowEdit] = useState(false);\n    // const [hack, setHack] = useState(1)\n\n    const {loggedIn, currentUser, activities} = props;\n\n    // console.log('trap',theUserRoutines)\n\n    console.log('dddd', activityId)\n\n    // const makeEdit = async () => {\n    //     setShowEdit(true)\n    // }\n\n    const handleUpdate = async (name, goal, id) => {\n        try{\n            const routines = await updateRoutine(name, goal, id);\n        } catch(error){\n            console.error\n        }\n    }\n\n\n    const handleDeleteRoutine = async (id) => {\n        try{\n            const routines = await deleteRoutine(id);\n        }catch (error){\n            console.error(error)\n        }\n    }\n\n    const handleActivityAdd = async (event) =>{\n        event.preventDefault();\n\n        const {duration, count} = durationCount;\n\n        try{\n\n            const response = await addActivityToRoutine(routineId, activityId, count, duration);\n\n            if(!response.id){\n                return alert('Error')\n            }\n\n            setRoutineId(null);\n            setDurationCount(null);\n            setActivityId(null)\n\n\n        } catch(error){\n            console.error(error)\n        }\n    }\n\n    const getUserRoutines = async () => {\n        if(!currentUser || !activities){\n            return;\n        }\n        try{\n            const routines = await userRoutines(currentUser);\n            // console.log('hhhh', routines)\n            setTheUserRoutines(routines);\n            // console.log('pop',theUserRoutines)\n        }catch (error) {\n            console.error(error);\n        }\n    }\n    \n    useEffect(getUserRoutines, [currentUser, activities])\n    \n\n\n    if(!loggedIn){\n        return <Redirect to ='/' />;\n    }else{\n\n    return(\n        <>\n        <div>\n        <h1>------My routines------</h1>\n        </div>\n\n\n        {/* {showEdit ? <EditRoutine showEdit = {showEdit} setShowEdit = {setShowEdit}/> : null} */}\n\n        {theUserRoutines ? (\n            theUserRoutines.map((routine, index) => {\n                return (\n                    <div key = {index}>\n                        <h2>{routine.name}</h2>\n                        <h3>{routine.goal}</h3>\n                    \n                \n                {/* <button type = 'button' className = 'edit' onClick = {() => makeEdit()}> */}\n                <button type = 'button' className = 'edit' onClick = {() => handleUpdate(routine.name, routine.goal, routine.id)}>\n                    Edit Routine Name or Goal\n                </button>\n\n                <button type ='button' className = 'delete' \n                // onClick = {() => handleDeleteRoutine(routine.id)}\n                >\n                    Delete Routine\n                </button>\n                \n                <form onSubmit = {handleActivityAdd}>\n                    <label>Add Routine Activity</label>\n                    <select name ='Activities' id = 'selectactivity' value = {activityId} \n                    onChange = {(event) => {setRoutineId(routine.id); setActivityId(event.target.value)}}>\n                        \n                        <option value ='null'>Select Activity</option>\n                        {\n                            activities.map((activity, index) => {\n                                return (\n                                    <option key = {index} value = {activity.id}>\n                                        {activity.name}\n                                    </option>\n                                )\n                            })\n                        }\n\n                    </select>\n\n                    <label>Count</label>\n                    <input type = 'number' min = '1' placeholder ='Count' \n                    onChange = {(event) => setDurationCount({...durationCount, count: event.target.value})}\n                    />\n                    \n\n\n                    <label>Duration</label>\n                    <input type = 'number' min = '1' placeholder = 'Duration'\n                    onChange = {(event) => setDurationCount({...durationCount, duration: event.target.value})}\n                    />\n                    \n                    <button className = 'addroutine' type = 'submit'>Submit</button>\n                </form>\n\n                </div>\n                \n                )\n            })\n        ): <h2>No routines made by you</h2>}\n\n\n\n        </>\n    )\n}\n}\nexport default MyRoutines;"]},"metadata":{},"sourceType":"module"}